/* automatically generated by rust-bindgen */

use core::libc::*;
pub type int8_t = c_schar;
pub type int16_t = c_short;
pub type int32_t = c_int;
pub type int64_t = c_long;
pub type uint8_t = c_uchar;
pub type uint16_t = c_ushort;
pub type uint32_t = c_uint;
pub type uint64_t = c_ulong;
pub type int_least8_t = c_schar;
pub type int_least16_t = c_short;
pub type int_least32_t = c_int;
pub type int_least64_t = c_long;
pub type uint_least8_t = c_uchar;
pub type uint_least16_t = c_ushort;
pub type uint_least32_t = c_uint;
pub type uint_least64_t = c_ulong;
pub type int_fast8_t = c_schar;
pub type int_fast16_t = c_long;
pub type int_fast32_t = c_long;
pub type int_fast64_t = c_long;
pub type uint_fast8_t = c_uchar;
pub type uint_fast16_t = c_ulong;
pub type uint_fast32_t = c_ulong;
pub type uint_fast64_t = c_ulong;
pub type intptr_t = c_long;
pub type uintptr_t = c_ulong;
pub type intmax_t = c_long;
pub type uintmax_t = c_ulong;
pub type __gwchar_t = c_int;
pub struct imaxdiv_t {
    pub quot: c_long,
    pub rem: c_long,
}
pub type Struct_kr_client_St = c_void;
pub type kr_client_t = Struct_kr_client_St;
pub type Struct_kr_shm_St = c_void;
pub type kr_shm_t = Struct_kr_shm_St;
pub type Struct_kr_response_St = c_void;
pub type kr_response_t = Struct_kr_response_St;
pub type kr_subunit_control_data_t = c_uint;
pub const KR_FLOAT: c_uint = 0;
pub const KR_INT32: c_uint = 1;
pub const KR_STRING: c_uint = 2;
pub struct kr_subunit_control_value_t {
    pub data: [c_uchar * 8],
}
pub impl kr_subunit_control_value_t {
    pub fn integer(&self) -> *c_int unsafe {
        cast::reinterpret_cast(&ptr::to_unsafe_ptr(self))
    }
    pub fn string(&self) -> **c_schar unsafe {
        cast::reinterpret_cast(&ptr::to_unsafe_ptr(self))
    }
    pub fn real(&self) -> *c_float unsafe {
        cast::reinterpret_cast(&ptr::to_unsafe_ptr(self))
    }
}
pub type kr_unit_t = c_uint;
pub const KR_RADIO: c_uint = 0;
pub const KR_MIXER: c_uint = 1;
pub const KR_COMPOSITOR: c_uint = 2;
pub const KR_TRANSPONDER: c_uint = 3;
pub type kr_mixer_subunit_t = c_uint;
pub const KR_PORTGROUP: c_uint = 0;
pub type kr_mixer_portgroup_control_t = c_uint;
pub const KR_VOLUME: c_uint = 0;
pub const KR_CROSSFADE: c_uint = 1;
pub type kr_compositor_subunit_t = c_uint;
pub const KR_VIDEOPORT: c_uint = 0;
pub const KR_SPRITE: c_uint = 1;
pub const KR_TEXT: c_uint = 2;
pub const KR_VECTOR: c_uint = 3;
pub type kr_compositor_control_t = c_uint;
pub const KR_X: c_uint = 0;
pub const KR_Y: c_uint = 1;
pub const KR_Z: c_uint = 2;
pub const KR_WIDTH: c_uint = 3;
pub const KR_HEIGHT: c_uint = 4;
pub const KR_ROTATION: c_uint = 5;
pub const KR_OPACITY: c_uint = 6;
pub const KR_XSCALE: c_uint = 7;
pub const KR_YSCALE: c_uint = 8;
pub const KR_RED: c_uint = 9;
pub const KR_GREEN: c_uint = 10;
pub const KR_BLUE: c_uint = 11;
pub const KR_ALPHA: c_uint = 12;
pub type kr_transponder_subunit_t = c_uint;
pub const KR_TRANSMITTER: c_uint = 0;
pub const KR_RECEIVER: c_uint = 1;
pub const KR_DEMUXER: c_uint = 2;
pub const KR_MUXER: c_uint = 3;
pub const KR_ENCODER: c_uint = 4;
pub const KR_DECODER: c_uint = 5;
pub type kr_transponder_control_t = c_uint;
pub const KR_BUFFER: c_uint = 0;
pub const KR_BITRATE: c_uint = 1;
pub type kr_unit_control_t = Struct_kr_unit_control_St;
pub type kr_subunit_control_path_t = Struct_kr_subunit_control_path_St;
pub struct kr_subunit_t {
    pub data: [c_uchar * 4],
}
pub impl kr_subunit_t {
    pub fn mixer_subunit(&self) -> *kr_mixer_subunit_t unsafe {
        cast::reinterpret_cast(&ptr::to_unsafe_ptr(self))
    }
    pub fn compositor_subunit(&self) -> *kr_compositor_subunit_t unsafe {
        cast::reinterpret_cast(&ptr::to_unsafe_ptr(self))
    }
    pub fn transponder_subunit(&self) -> *kr_transponder_subunit_t unsafe {
        cast::reinterpret_cast(&ptr::to_unsafe_ptr(self))
    }
}
pub struct kr_subunit_control_t {
    pub data: [c_uchar * 4],
}
pub impl kr_subunit_control_t {
    pub fn portgroup_control(&self) -> *kr_mixer_portgroup_control_t unsafe {
        cast::reinterpret_cast(&ptr::to_unsafe_ptr(self))
    }
    pub fn compositor_control(&self) -> *kr_compositor_control_t unsafe {
        cast::reinterpret_cast(&ptr::to_unsafe_ptr(self))
    }
    pub fn transponder_control(&self) -> *kr_transponder_control_t unsafe {
        cast::reinterpret_cast(&ptr::to_unsafe_ptr(self))
    }
}
pub struct Struct_kr_subunit_control_path_St {
    pub unit: kr_unit_t,
    pub subunit: kr_subunit_t,
    pub control: kr_subunit_control_t,
}
pub struct kr_subunit_address_t {
    pub data: [c_uchar * 64],
}
pub impl kr_subunit_address_t {
    pub fn subunit_number(&self) -> *c_int unsafe {
        cast::reinterpret_cast(&ptr::to_unsafe_ptr(self))
    }
    pub fn subunit_name(&self) -> *[c_schar * 64] unsafe {
        cast::reinterpret_cast(&ptr::to_unsafe_ptr(self))
    }
}
pub struct Struct_kr_unit_control_St {
    pub path: kr_subunit_control_path_t,
    pub address: kr_subunit_address_t,
    pub data_type: kr_subunit_control_data_t,
    pub value: kr_subunit_control_value_t,
    pub duration: c_int,
}
pub type item_callback_t = *u8;
#[link_args = "-lkradradio_client"]
pub extern "C" {
    fn imaxabs(++__n: intmax_t) -> intmax_t;
    fn imaxdiv(++__numer: intmax_t, ++__denom: intmax_t) -> imaxdiv_t;
    fn strtoimax(++__nptr: *c_schar, ++__endptr: **c_schar, ++__base: c_int)
     -> intmax_t;
    fn strtoumax(++__nptr: *c_schar, ++__endptr: **c_schar, ++__base: c_int)
     -> uintmax_t;
    fn wcstoimax(++__nptr: *__gwchar_t, ++__endptr: **__gwchar_t,
                 ++__base: c_int) -> intmax_t;
    fn wcstoumax(++__nptr: *__gwchar_t, ++__endptr: **__gwchar_t,
                 ++__base: c_int) -> uintmax_t;
    fn kr_subunit_control_set(++kr_client: *kr_client_t, ++unit: kr_unit_t,
                              ++subunit: kr_subunit_t,
                              ++address: kr_subunit_address_t,
                              ++control: kr_subunit_control_t,
                              ++value: kr_subunit_control_value_t) -> c_int;
    fn kr_client_create(++client_name: *c_schar) -> *kr_client_t;
    fn kr_connect(++client: *kr_client_t, ++sysname: *c_schar) -> c_int;
    fn kr_connect_remote(++client: *kr_client_t, ++host: *c_schar,
                         ++port: c_int) -> c_int;
    fn kr_connected(++client: *kr_client_t) -> c_int;
    fn kr_disconnect(++client: *kr_client_t) -> c_int;
    fn kr_client_destroy(++client: **kr_client_t) -> c_int;
    fn kr_client_local(++kr_client: *kr_client_t) -> c_int;
    fn kr_broadcast_subscribe(++kr_client: *kr_client_t,
                              ++broadcast_id: uint32_t);
    fn kr_poll(++kr_client: *kr_client_t, ++timeout_ms: uint32_t) -> c_int;
    fn kr_response_free(++kr_response: **kr_response_t);
    fn kr_response_to_string(++kr_response: *kr_response_t,
                             ++string: **c_schar) -> c_int;
    fn kr_response_to_int(++kr_response: *kr_response_t, ++number: *c_int) ->
     c_int;
    fn kr_response_free_string(++string: **c_schar);
    fn kr_response_get_string(++ebml_frag: *c_uchar,
                              ++ebml_data_size: uint64_t, ++string: **c_schar)
     -> c_int;
    fn kr_response_unit(++kr_response: *kr_response_t) -> kr_unit_t;
    fn kr_response_size(++kr_response: *kr_response_t) -> uint32_t;
    fn kr_client_response_get(++kr_client: *kr_client_t,
                              ++kr_response: **kr_response_t);
    fn kr_client_response_wait(++kr_client: *kr_client_t,
                               ++kr_response: **kr_response_t);
    fn kr_client_response_wait_print(++kr_client: *kr_client_t);
    fn kr_shm_create(++client: *kr_client_t) -> *kr_shm_t;
    fn kr_shm_destroy(++kr_shm: *kr_shm_t);
    fn kr_uptime(++client: *kr_client_t);
    fn kr_system_info(++client: *kr_client_t);
    fn kr_system_cpu_usage(++client: *kr_client_t);
    fn kr_set_dir(++client: *kr_client_t, ++dir: *c_schar);
    fn kr_logname(++client: *kr_client_t);
    fn kr_remote_status(++client: *kr_client_t);
    fn kr_remote_enable(++client: *kr_client_t, ++interface: *c_schar,
                        ++port: c_int);
    fn kr_remote_disable(++client: *kr_client_t, ++interface: *c_schar,
                         ++port: c_int);
    fn kr_web_enable(++client: *kr_client_t, ++http_port: c_int,
                     ++websocket_port: c_int, ++headcode: *c_schar,
                     ++header: *c_schar, ++footer: *c_schar);
    fn kr_web_disable(++client: *kr_client_t);
    fn kr_osc_enable(++client: *kr_client_t, ++port: c_int);
    fn kr_osc_disable(++client: *kr_client_t);
    fn kr_read_tag_inner(++client: *kr_client_t, ++tag_item: **c_schar,
                         ++tag_name: **c_schar, ++tag_value: **c_schar);
    fn kr_read_tag(++client: *kr_client_t, ++tag_item: **c_schar,
                   ++tag_name: **c_schar, ++tag_value: **c_schar) -> c_int;
    fn kr_tags(++client: *kr_client_t, ++item: *c_schar);
    fn kr_tag(++client: *kr_client_t, ++item: *c_schar, ++tag_name: *c_schar);
    fn kr_set_tag(++client: *kr_client_t, ++item: *c_schar,
                  ++tag_name: *c_schar, ++tag_value: *c_schar);
}
